// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // First multiplexer logic
    Not(in=instruction[15], out=aIns); // if instruction[15] = 0 , it is A-instruction
    // choose between ALU output and instruction based on instruction type (A or C).
    Mux16(a=aluOut, b=instruction, sel=aIns, out=mux1out); // when it is A-instruction, get the address as output;

    // When to load A-register ?
    // If it is a A instruction or (C instruction and Destination bit (d1) is 1)
    Or(a=aIns, b=instruction[5], out=destA);
    ARegister(in=mux1out, load=destA, out=regA, out[0..14]=addressM);

    // When to write to addressM ?
    // If it is C instruction and destination bit (d3) is 1.
    And(a=instruction[15], b=instruction[3], out=writeM);

    // When to load D-register ?
    // If it is a C instruction and destination bit (d2) is 1.
    And(a=instruction[15], b=instruction[04], out=destD);
    DRegister(in=aluOut, load=destD, out=regD);

    // Select between A register and inM
    // Select A register] if control bit a = 0 else M
    Mux16(a=regA, b=inM, sel=instruction[12], out=mux2out);

    // Carry out the operation on D-register value and `mux2out`.
    ALU(x=regD, y=mux2out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zrPin, ng=ngPin);

    // Jump logic - Determine when to load PC with A-register value.
    Mux(a=instruction[2], b=instruction[1], sel=zrPin, out=j1Orj2);
    Xor(a=ngPin, b=zrPin, out=ngXorZr);
    Mux(a=instruction[0], b=j1Orj2, sel=ngXorZr, out=jumpTemp);
    And(a=instruction[15], b=jumpTemp, out=jump);

    // Program counter.
    PC(in=regA, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
